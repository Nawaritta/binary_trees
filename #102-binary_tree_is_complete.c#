#include "binary_trees.h"

/**
 * subtree_trav_next - returns the next node to visit in
 *                            pre-order traversal
 * @node: a pointer to the current node
 * @subroot: a pointer to the root node of the subtree
 * Return: a pointer to the next node to visit,
 *         or NULL if the traversal is complete
 */
binary_tree_t *subtree_trav_next(const binary_tree_t *node,
				 const binary_tree_t *subroot)
{

	if (node == NULL || subroot == NULL)
		return (NULL);

	if (node->left != NULL)
		return (node->left);

	if (node->right != NULL)
		return (node->right);

	while (node->parent != NULL)
	{
		if (node == node->parent->left && node->parent->right != NULL)
			return (node->parent->right);
			
		node = node->parent;
	}

	return (NULL);
}

int binary_tree_is_complete(const binary_tree_t *tree)


	while (tree->left)
	{
		tree = tree->left;
	}
